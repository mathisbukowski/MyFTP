name: MyFTP CI/CD

env:
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-NWP-400-LIL-4-1-myftp-mathis.bukowski.git"
  MIRROR_NAME: "EpitechPromo2028/B-NWP-400-LIL-4-1-myftp-mathis.bukowski"

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/**'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image:  ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
      - name: check_coding_style
        run: |
          coding-style.sh "$(pwd)" "$(pwd)"
          codingLogFile="$(pwd)/coding-style-reports.log"
          if [ -s "$codingLogFile" ]; then
            while IFS= read -r line; do
              IFS=':' read -ra fields <<< "$line"
              file="${fields[0]}"
              line="${fields[1]}"
              name="${fields[2]}"
              type="${fields[3]}"
              echo "::error title=$name coding style error,file=$file,line=$line::$type"
            done < "$codingLogFile"
            exit 1
          else
            echo "No coding style errors detected"
          fi
  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_coding_style
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Create Build Directory"
        run: mkdir -p build

      - name: "Compile with Make"
        run: |
          make
        timeout-minutes: 2

      - name: "Verify Executable Permissions and Presence"
        run: |
          if [ -f "myftp" ] && [ -x "myftp" ]; then
              echo "myftp exists and is executable."
          else
              echo "myftp does not exist or is not executable."
              exit 1
          fi

  push_to_mirror:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: check_program_compilation
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Push to Mirror Repository"
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
